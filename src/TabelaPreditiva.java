//Tiago Henrique Do Couto
//Caique Souza

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

class TabelaPreditiva {

    private static TabelaPreditiva instance = new TabelaPreditiva();


    private final List<TokenID> firstOfS = new ArrayList<>();
    private final List<TokenID> firstOfBLOCK = new ArrayList<>();
    private final List<TokenID> firstOfCMDS = new ArrayList<>();
    private final List<TokenID> firstOfIFFLW = new ArrayList<>();
    private final List<TokenID> firstOfIDFLW = new ArrayList<>();
    private final List<TokenID> firstOfDCFLW = new ArrayList<>();
    private final List<TokenID> firstOfCMD = new ArrayList<>();
    private final List<TokenID> firstOfDECL = new ArrayList<>();
    private final List<TokenID> firstOfCOND = new ArrayList<>();
    private final List<TokenID> firstOfCNDB = new ArrayList<>();
    private final List<TokenID> firstOfATRIB = new ArrayList<>();
    private final List<TokenID> firstOfATRIB2 = new ArrayList<>();
    private final List<TokenID> firstOfATR_ID = new ArrayList<>();
    private final List<TokenID> firstOfATR_VN = new ArrayList<>();
    private final List<TokenID> firstOfAT_VN2 = new ArrayList<>();
    private final List<TokenID> firstOfEXP_L = new ArrayList<>();
    private final List<TokenID> firstOfEXP_L2 = new ArrayList<>();
    private final List<TokenID> firstOfEXP_L3 = new ArrayList<>();
    private final List<TokenID> firstOfEXP_N = new ArrayList<>();
    private final List<TokenID> firstOfEXP_N2 = new ArrayList<>();
    private final List<TokenID> firstOfVAL_N = new ArrayList<>();
    private final List<TokenID> firstOfREP = new ArrayList<>();
    private final List<TokenID> firstOfREPF = new ArrayList<>();
    private final List<TokenID> firstOfREPW = new ArrayList<>();
    private final List<TokenID> followOfS = new ArrayList<>();
    private final List<TokenID> followOfBLOCK = new ArrayList<>();
    private final List<TokenID> followOfCMDS = new ArrayList<>();
    private final List<TokenID> followOfIFFLW = new ArrayList<>();
    private final List<TokenID> followOfIDFLW = new ArrayList<>();
    private final List<TokenID> followOfDCFLW = new ArrayList<>();
    private final List<TokenID> followOfCMD = new ArrayList<>();
    private final List<TokenID> followOfDECL = new ArrayList<>();
    private final List<TokenID> followOfCOND = new ArrayList<>();
    private final List<TokenID> followOfCNDB = new ArrayList<>();
    private final List<TokenID> followOfATRIB = new ArrayList<>();
    private final List<TokenID> followOfATRIB2 = new ArrayList<>();
    private final List<TokenID> followOfATR_ID = new ArrayList<>();
    private final List<TokenID> followOfATR_VN = new ArrayList<>();
    private final List<TokenID> followOfAT_VN2 = new ArrayList<>();
    private final List<TokenID> followOfEXP_L = new ArrayList<>();
    private final List<TokenID> followOfEXP_L2 = new ArrayList<>();
    private final List<TokenID> followOfEXP_L3 = new ArrayList<>();
    private final List<TokenID> followOfEXP_N = new ArrayList<>();
    private final List<TokenID> followOfEXP_N2 = new ArrayList<>();
    private final List<TokenID> followOfVAL_N = new ArrayList<>();
    private final List<TokenID> followOfREP = new ArrayList<>();
    private final List<TokenID> followOfREPF = new ArrayList<>();
    private final List<TokenID> followOfREPW = new ArrayList<>();

    private final HashMap<Funcoes, List<TokenID>> firsts = new HashMap<>();
    private final HashMap<Funcoes, List<TokenID>> follows = new HashMap<>();

    static TabelaPreditiva getInstance() {
        return instance;
    }

    private TabelaPreditiva() {
        carregaFirsts();
        carregaFollows();
        carregaMapa();
    }
    boolean isFirstOf(Funcoes Funcoes, TokenID TokenID) {
        return firsts.get(Funcoes).contains(TokenID);
    }

    boolean isFollowOf(Funcoes Funcoes, TokenID TokenID) {
        return follows.get(Funcoes).contains(TokenID);
    }
    private void carregaMapa() {
        firsts.put(Funcoes.S, firstOfS);
        firsts.put(Funcoes.BLOCK, firstOfBLOCK);
        firsts.put(Funcoes.CMDS, firstOfCMDS);
        firsts.put(Funcoes.IFFLW, firstOfIFFLW);
        firsts.put(Funcoes.IDFLW, firstOfIDFLW);
        firsts.put(Funcoes.DCFLW, firstOfDCFLW);
        firsts.put(Funcoes.CMD, firstOfCMD);
        firsts.put(Funcoes.DECL, firstOfDECL);
        firsts.put(Funcoes.COND, firstOfCOND);
        firsts.put(Funcoes.CNDB, firstOfCNDB);
        firsts.put(Funcoes.ATRIB, firstOfATRIB);
        firsts.put(Funcoes.ATRIB2, firstOfATRIB2);
        firsts.put(Funcoes.ATR_ID, firstOfATR_ID);
        firsts.put(Funcoes.ATR_VN, firstOfATR_VN);
        firsts.put(Funcoes.AT_VN2, firstOfAT_VN2);
        firsts.put(Funcoes.EXP_L, firstOfEXP_L);
        firsts.put(Funcoes.EXP_L2, firstOfEXP_L2);
        firsts.put(Funcoes.EXP_L3, firstOfEXP_L3);
        firsts.put(Funcoes.EXP_N, firstOfEXP_N);
        firsts.put(Funcoes.EXP_N2, firstOfEXP_N2);
        firsts.put(Funcoes.VAL_N, firstOfVAL_N);
        firsts.put(Funcoes.REP, firstOfREP);
        firsts.put(Funcoes.REPF, firstOfREPF);
        firsts.put(Funcoes.REPW, firstOfREPW);
        follows.put(Funcoes.S, followOfS);
        follows.put(Funcoes.BLOCK, followOfBLOCK);
        follows.put(Funcoes.CMDS, followOfCMDS);
        follows.put(Funcoes.IFFLW, followOfIFFLW);
        follows.put(Funcoes.IDFLW, followOfIDFLW);
        follows.put(Funcoes.DCFLW, followOfDCFLW);
        follows.put(Funcoes.CMD, followOfCMD);
        follows.put(Funcoes.DECL, followOfDECL);
        follows.put(Funcoes.COND, followOfCOND);
        follows.put(Funcoes.CNDB, followOfCNDB);
        follows.put(Funcoes.ATRIB, followOfATRIB);
        follows.put(Funcoes.ATRIB2, followOfATRIB2);
        follows.put(Funcoes.ATR_ID, followOfATR_ID);
        follows.put(Funcoes.ATR_VN, followOfATR_VN);
        follows.put(Funcoes.AT_VN2, followOfAT_VN2);
        follows.put(Funcoes.EXP_L, followOfEXP_L);
        follows.put(Funcoes.EXP_L2, followOfEXP_L2);
        follows.put(Funcoes.EXP_L3, followOfEXP_L3);
        follows.put(Funcoes.EXP_N, followOfEXP_N);
        follows.put(Funcoes.EXP_N2, followOfEXP_N2);
        follows.put(Funcoes.VAL_N, followOfVAL_N);
        follows.put(Funcoes.REP, followOfREP);
        follows.put(Funcoes.REPF, followOfREPF);
        follows.put(Funcoes.REPW, followOfREPW);
    }
    
    private void carregaFirsts() {
        firstOfS.add(TokenID.PROGRAM);
        firstOfBLOCK.add(TokenID.ID);
        firstOfBLOCK.add(TokenID.BEGIN);
        firstOfBLOCK.add(TokenID.DECLARE);
        firstOfBLOCK.add(TokenID.IF);
        firstOfBLOCK.add(TokenID.FOR);
        firstOfBLOCK.add(TokenID.WHILE);
        firstOfIFFLW.add(TokenID.L_PAR);
        firstOfIDFLW.add(TokenID.ATTRIB_OP);
        firstOfDCFLW.add(TokenID.ID);
        firstOfCMDS.add(TokenID.ID);
        firstOfCMDS.add(TokenID.DECLARE);
        firstOfCMDS.add(TokenID.IF);
        firstOfCMDS.add(TokenID.FOR);
        firstOfCMDS.add(TokenID.WHILE);
        firstOfCMD.add(TokenID.ID);
        firstOfCMD.add(TokenID.DECLARE);
        firstOfCMD.add(TokenID.IF);
        firstOfCMD.add(TokenID.FOR);
        firstOfCMD.add(TokenID.WHILE);
        firstOfDECL.add(TokenID.DECLARE);
        firstOfCOND.add(TokenID.IF);
        firstOfCNDB.add(TokenID.ELSE);
        firstOfATRIB.add(TokenID.ID);
        firstOfATRIB2.add(TokenID.ID);
        firstOfATRIB2.add(TokenID.L_PAR);
        firstOfATRIB2.add(TokenID.LITERAL);
        firstOfATRIB2.add(TokenID.NUM_INT);
        firstOfATRIB2.add(TokenID.NUM_FLOAT);
        firstOfATR_ID.add(TokenID.REL_OP);
        firstOfATR_ID.add(TokenID.LOGIC_OP);
        firstOfATR_VN.add(TokenID.ADDSUB_OP);
        firstOfATR_VN.add(TokenID.MULTDIV_OP);
        firstOfATR_VN.add(TokenID.REL_OP);
        firstOfAT_VN2.add(TokenID.REL_OP);
        firstOfEXP_L.add(TokenID.LOGIC_VALUE);
        firstOfEXP_L.add(TokenID.ID);
        firstOfEXP_L.add(TokenID.L_PAR);
        firstOfEXP_L.add(TokenID.NUM_INT);
        firstOfEXP_L.add(TokenID.NUM_FLOAT);
        firstOfEXP_L2.add(TokenID.REL_OP);
        firstOfEXP_L2.add(TokenID.LOGIC_OP);
        firstOfEXP_L3.add(TokenID.LOGIC_OP);
        firstOfEXP_N.add(TokenID.ID);
        firstOfEXP_N.add(TokenID.L_PAR);
        firstOfEXP_N.add(TokenID.NUM_INT);
        firstOfEXP_N.add(TokenID.NUM_FLOAT);
        firstOfEXP_N2.add(TokenID.ADDSUB_OP);
        firstOfEXP_N2.add(TokenID.MULTDIV_OP);
        firstOfVAL_N.add(TokenID.NUM_INT);
        firstOfVAL_N.add(TokenID.NUM_FLOAT);
        firstOfREP.add(TokenID.FOR);
        firstOfREP.add(TokenID.WHILE);
        firstOfREPF.add(TokenID.FOR);
        firstOfREPW.add(TokenID.WHILE);
    }

    private void carregaFollows() {
        followOfS.add(TokenID.$);
        followOfBLOCK.add(TokenID.END);
        followOfBLOCK.add(TokenID.END_PROG);
        followOfBLOCK.add(TokenID.DECLARE);
        followOfBLOCK.add(TokenID.IF);
        followOfBLOCK.add(TokenID.ID);
        followOfBLOCK.add(TokenID.FOR);
        followOfBLOCK.add(TokenID.WHILE);
        followOfBLOCK.add(TokenID.ELSE);
        followOfIFFLW.add(TokenID.END);
        followOfIDFLW.add(TokenID.END);
        followOfDCFLW.add(TokenID.END);
        followOfCMDS.add(TokenID.END);
        followOfCMD.add(TokenID.END);
        followOfCMD.add(TokenID.END_PROG);
        followOfCMD.add(TokenID.ID);
        followOfCMD.add(TokenID.DECLARE);
        followOfCMD.add(TokenID.IF);
        followOfCMD.add(TokenID.FOR);
        followOfCMD.add(TokenID.WHILE);
        followOfCMD.add(TokenID.ELSE);
        followOfDECL.add(TokenID.END);
        followOfDECL.add(TokenID.END_PROG);
        followOfDECL.add(TokenID.ID);
        followOfDECL.add(TokenID.DECLARE);
        followOfDECL.add(TokenID.IF);
        followOfDECL.add(TokenID.FOR);
        followOfDECL.add(TokenID.WHILE);
        followOfDECL.add(TokenID.ELSE);
        followOfCOND.add(TokenID.END);
        followOfCOND.add(TokenID.END_PROG);
        followOfCOND.add(TokenID.ID);
        followOfCOND.add(TokenID.DECLARE);
        followOfCOND.add(TokenID.IF);
        followOfCOND.add(TokenID.FOR);
        followOfCOND.add(TokenID.WHILE);
        followOfCOND.add(TokenID.ELSE);
        followOfCNDB.add(TokenID.END);
        followOfCNDB.add(TokenID.END_PROG);
        followOfCNDB.add(TokenID.ID);
        followOfCNDB.add(TokenID.DECLARE);
        followOfCNDB.add(TokenID.IF);
        followOfCNDB.add(TokenID.FOR);
        followOfCNDB.add(TokenID.WHILE);
        followOfCNDB.add(TokenID.ELSE);
        followOfATRIB.add(TokenID.END);
        followOfATRIB.add(TokenID.END_PROG);
        followOfATRIB.add(TokenID.DECLARE);
        followOfATRIB.add(TokenID.IF);
        followOfATRIB.add(TokenID.ID);
        followOfATRIB.add(TokenID.FOR);
        followOfATRIB.add(TokenID.WHILE);
        followOfATRIB.add(TokenID.ELSE);
        followOfATRIB2.add(TokenID.TERM);
        followOfATR_ID.add(TokenID.TERM);
        followOfATR_VN.add(TokenID.TERM);
        followOfAT_VN2.add(TokenID.TERM);
        followOfEXP_L.add(TokenID.TERM);
        followOfEXP_L.add(TokenID.R_PAR);
        followOfEXP_L2.add(TokenID.TERM);
        followOfEXP_L2.add(TokenID.R_PAR);
        followOfEXP_L3.add(TokenID.TERM);
        followOfEXP_L3.add(TokenID.R_PAR);
        followOfEXP_N.add(TokenID.REL_OP);
        followOfEXP_N.add(TokenID.TO);
        followOfEXP_N.add(TokenID.BEGIN);
        followOfEXP_N.add(TokenID.DECLARE);
        followOfEXP_N.add(TokenID.IF);
        followOfEXP_N.add(TokenID.ID);
        followOfEXP_N.add(TokenID.FOR);
        followOfEXP_N.add(TokenID.WHILE);
        followOfEXP_N.add(TokenID.TERM);
        followOfEXP_N.add(TokenID.R_PAR);
        followOfEXP_N2.add(TokenID.REL_OP);
        followOfEXP_N2.add(TokenID.TO);
        followOfEXP_N2.add(TokenID.BEGIN);
        followOfEXP_N2.add(TokenID.DECLARE);
        followOfEXP_N2.add(TokenID.IF);
        followOfEXP_N2.add(TokenID.ID);
        followOfEXP_N2.add(TokenID.FOR);
        followOfEXP_N2.add(TokenID.WHILE);
        followOfEXP_N2.add(TokenID.TERM);
        followOfEXP_N2.add(TokenID.R_PAR);
        followOfVAL_N.add(TokenID.TO);
        followOfVAL_N.add(TokenID.BEGIN);
        followOfVAL_N.add(TokenID.DECLARE);
        followOfVAL_N.add(TokenID.IF);
        followOfVAL_N.add(TokenID.ID);
        followOfVAL_N.add(TokenID.FOR);
        followOfVAL_N.add(TokenID.WHILE);
        followOfVAL_N.add(TokenID.REL_OP);
        followOfVAL_N.add(TokenID.ADDSUB_OP);
        followOfVAL_N.add(TokenID.MULTDIV_OP);
        followOfVAL_N.add(TokenID.TERM);
        followOfVAL_N.add(TokenID.R_PAR);
        followOfREP.add(TokenID.END);
        followOfREP.add(TokenID.END_PROG);
        followOfREP.add(TokenID.DECLARE);
        followOfREP.add(TokenID.IF);
        followOfREP.add(TokenID.ID);
        followOfREP.add(TokenID.FOR);
        followOfREP.add(TokenID.WHILE);
        followOfREP.add(TokenID.ELSE);
        followOfREPF.add(TokenID.END);
        followOfREPF.add(TokenID.END_PROG);
        followOfREPF.add(TokenID.DECLARE);
        followOfREPF.add(TokenID.IF);
        followOfREPF.add(TokenID.ID);
        followOfREPF.add(TokenID.FOR);
        followOfREPF.add(TokenID.WHILE);
        followOfREPF.add(TokenID.ELSE);
        followOfREPW.add(TokenID.END);
        followOfREPW.add(TokenID.END_PROG);
        followOfREPW.add(TokenID.DECLARE);
        followOfREPW.add(TokenID.IF);
        followOfREPW.add(TokenID.ID);
        followOfREPW.add(TokenID.FOR);
        followOfREPW.add(TokenID.WHILE);
        followOfREPW.add(TokenID.ELSE);
    }
}
